//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;

namespace Tateeda.Clires.Core.Data.EF
{
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public IDbSet<Address> Addresses { get; set; }
        public IDbSet<Appointment> Appointments { get; set; }
        public IDbSet<AppointmentForm> AppointmentForms { get; set; }
        public IDbSet<AppUser> AppUsers { get; set; }
        public IDbSet<Arm> Arms { get; set; }
        public IDbSet<Code> Codes { get; set; }
        public IDbSet<Contact> Contacts { get; set; }
        public IDbSet<Country> Countries { get; set; }
        public IDbSet<CssType> CssTypes { get; set; }
        public IDbSet<CTGovSubmission> CTGovSubmissions { get; set; }
        public IDbSet<Drug> Drugs { get; set; }
        public IDbSet<DrugCategory> DrugCategories { get; set; }
        public IDbSet<DrugClass> DrugClasses { get; set; }
        public IDbSet<Email> Emails { get; set; }
        public IDbSet<FormAnswer> FormAnswers { get; set; }
        public IDbSet<FormVisibilityByVisitForSubject> FormVisibilityByVisitForSubjects { get; set; }
        public IDbSet<Language> Languages { get; set; }
        public IDbSet<LocaleStringResource> LocaleStringResources { get; set; }
        public IDbSet<Membership> Memberships { get; set; }
        public IDbSet<MessageProvider> MessageProviders { get; set; }
        public IDbSet<MessageQueue> MessageQueues { get; set; }
        public IDbSet<MessageTemplate> MessageTemplates { get; set; }
        public IDbSet<Profile> Profiles { get; set; }
        public IDbSet<RecreationalDrugOrSubstance> RecreationalDrugOrSubstances { get; set; }
        public IDbSet<Role> Roles { get; set; }
        public IDbSet<ScheduleSubjectVisit> ScheduleSubjectVisits { get; set; }
        public IDbSet<Site> Sites { get; set; }
        public IDbSet<State> States { get; set; }
        public IDbSet<Study> Studies { get; set; }
        public IDbSet<SubjectDrug> SubjectDrugs { get; set; }
        public IDbSet<TimeZone> TimeZones { get; set; }
        public IDbSet<User> Users { get; set; }
        public IDbSet<VisitForm> VisitForms { get; set; }
        public IDbSet<Answer> Answers { get; set; }
        public IDbSet<AnswerChildQuestion> AnswerChildQuestions { get; set; }
        public IDbSet<Visit> Visits { get; set; }
        public IDbSet<Form> Forms { get; set; }
        public IDbSet<FormVerification> FormVerifications { get; set; }
        public IDbSet<Question> Questions { get; set; }
        public IDbSet<VisitStep> VisitSteps { get; set; }
        public IDbSet<VisitStepVisitSequence> VisitStepVisitSequences { get; set; }
        public IDbSet<Setting> Settings { get; set; }
        public IDbSet<SubjectAltNumber> SubjectAltNumbers { get; set; }
        public IDbSet<Phone> Phones { get; set; }
        public IDbSet<Feedback> Feedbacks { get; set; }
        public IDbSet<Subject> Subjects { get; set; }
        public IDbSet<SubjectDrugHistory> SubjectDrugHistories { get; set; }
        public IDbSet<LibraryAnswer> LibraryAnswers { get; set; }
        public IDbSet<LibraryForm> LibraryForms { get; set; }
        public IDbSet<LibraryQuestion> LibraryQuestions { get; set; }
        public IDbSet<File> Files { get; set; }
        public IDbSet<FormInProcess> FormInProcesses { get; set; }
        public IDbSet<ErrorLog> ErrorLogs { get; set; }
        public IDbSet<Organization> Organizations { get; set; }
        public IDbSet<StudySetupMap> StudySetupMaps { get; set; }
        public IDbSet<StudySetupStep> StudySetupSteps { get; set; }
        public IDbSet<FormQuestionAnswerImport> FormQuestionAnswerImports { get; set; }
        public IDbSet<UserSetting> UserSettings { get; set; }
    
        public virtual ObjectResult<uspGetSubjectById_Result> uspGetSubjectById(Nullable<int> subjectId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(uspGetSubjectById_Result).Assembly);
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSubjectById_Result>("uspGetSubjectById", subjectIdParameter);
        }
    
        public virtual ObjectResult<uspGetSubjectBySiteId_Result> uspGetSubjectBySiteId(Nullable<int> siteId, Nullable<int> studyId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(uspGetSubjectBySiteId_Result).Assembly);
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var studyIdParameter = studyId.HasValue ?
                new ObjectParameter("StudyId", studyId) :
                new ObjectParameter("StudyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSubjectBySiteId_Result>("uspGetSubjectBySiteId", siteIdParameter, studyIdParameter);
        }
    
        public virtual ObjectResult<uspSubjectFindByFirstLastName_Result> uspSubjectFindByFirstLastName(Nullable<int> siteId, Nullable<int> studyId, string firstName, string lastName)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(uspSubjectFindByFirstLastName_Result).Assembly);
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var studyIdParameter = studyId.HasValue ?
                new ObjectParameter("StudyId", studyId) :
                new ObjectParameter("StudyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSubjectFindByFirstLastName_Result>("uspSubjectFindByFirstLastName", siteIdParameter, studyIdParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspSubjectInsert(Nullable<int> siteId, Nullable<int> studyId, string nickname, string familyId, string notes, string nIMHID, Nullable<int> gender, Nullable<int> yearBorn, Nullable<int> status, Nullable<int> sortOrder, string sSN, string firstName, string lastName, string dateOfBirth, Nullable<int> contactTypeId, string street, string city, string zip, Nullable<int> stateId, Nullable<int> countryId, string countryCode, Nullable<int> addressTypeId, Nullable<int> areaCode, Nullable<int> phoneNumber, string telephone, Nullable<int> phoneTypeId, string emailAddress, string createdBy)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var studyIdParameter = studyId.HasValue ?
                new ObjectParameter("StudyId", studyId) :
                new ObjectParameter("StudyId", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var familyIdParameter = familyId != null ?
                new ObjectParameter("FamilyId", familyId) :
                new ObjectParameter("FamilyId", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var nIMHIDParameter = nIMHID != null ?
                new ObjectParameter("NIMHID", nIMHID) :
                new ObjectParameter("NIMHID", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var yearBornParameter = yearBorn.HasValue ?
                new ObjectParameter("YearBorn", yearBorn) :
                new ObjectParameter("YearBorn", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("AddressTypeId", addressTypeId) :
                new ObjectParameter("AddressTypeId", typeof(int));
    
            var areaCodeParameter = areaCode.HasValue ?
                new ObjectParameter("AreaCode", areaCode) :
                new ObjectParameter("AreaCode", typeof(int));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(int));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var phoneTypeIdParameter = phoneTypeId.HasValue ?
                new ObjectParameter("PhoneTypeId", phoneTypeId) :
                new ObjectParameter("PhoneTypeId", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspSubjectInsert", siteIdParameter, studyIdParameter, nicknameParameter, familyIdParameter, notesParameter, nIMHIDParameter, genderParameter, yearBornParameter, statusParameter, sortOrderParameter, sSNParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, contactTypeIdParameter, streetParameter, cityParameter, zipParameter, stateIdParameter, countryIdParameter, countryCodeParameter, addressTypeIdParameter, areaCodeParameter, phoneNumberParameter, telephoneParameter, phoneTypeIdParameter, emailAddressParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSubjectUpdate(Nullable<int> subjectId, Nullable<int> siteId, string nickname, string familyId, string notes, string nIMHID, Nullable<int> gender, Nullable<int> yearBorn, Nullable<int> status, Nullable<int> sortOrder, string sSN, string firstName, string lastName, string dateOfBirth)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var familyIdParameter = familyId != null ?
                new ObjectParameter("FamilyId", familyId) :
                new ObjectParameter("FamilyId", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var nIMHIDParameter = nIMHID != null ?
                new ObjectParameter("NIMHID", nIMHID) :
                new ObjectParameter("NIMHID", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var yearBornParameter = yearBorn.HasValue ?
                new ObjectParameter("YearBorn", yearBorn) :
                new ObjectParameter("YearBorn", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSubjectUpdate", subjectIdParameter, siteIdParameter, nicknameParameter, familyIdParameter, notesParameter, nIMHIDParameter, genderParameter, yearBornParameter, statusParameter, sortOrderParameter, sSNParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter);
        }
    }
}
